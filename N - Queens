Description:
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9

Python3:
class Solution:
    
    def solveNQueens(self, n: int) -> list[list[str]]:
        def is_safe(row, col):
            # Check if the column is safe
            if col in cols:
                return False
            # Check if the main diagonal (\) is safe
            if row - col in diagonals:
                return False
            # Check if the secondary diagonal (/) is safe
            if row + col in anti_diagonals:
                return False
            return True

        def backtrack(row):
            if row == n:
                # Convert board to the required output format
                solution = []
                for r in board:
                    solution.append("".join(r))
                result.append(solution)
                return

            for col in range(n):
                if is_safe(row, col):
                    # Place a queen
                    board[row][col] = "Q"
                    cols.add(col)
                    diagonals.add(row - col)
                    anti_diagonals.add(row + col)

                    # Recur to place the next queen
                    backtrack(row + 1)

                    # Backtrack: remove the queen
                    board[row][col] = "."
                    cols.remove(col)
                    diagonals.remove(row - col)
                    anti_diagonals.remove(row + col)

        # Initialize the data structures
        result = []
        board = [["."] * n for _ in range(n)]
        cols = set()  # Columns where queens are placed
        diagonals = set()  # Main diagonals (\)
        anti_diagonals = set()  # Secondary diagonals (/)

        # Start backtracking from the first row
        backtrack(0)
        return result
