Description:
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return the number of distinct solutions to the n-queens puzzle.

 

Example 1:


Input: n = 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown.
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 9
Python3:
class Solution:
    def totalNQueens(self, n: int) -> int:
        def backtrack(row):
            if row == n:
                # All queens are placed successfully
                nonlocal count
                count += 1
                return
            
            for col in range(n):
                if col in cols or (row - col) in diagonals or (row + col) in anti_diagonals:
                    continue
                
                # Place the queen
                cols.add(col)
                diagonals.add(row - col)
                anti_diagonals.add(row + col)
                
                # Recur to place the next queen
                backtrack(row + 1)
                
                # Backtrack: remove the queen
                cols.remove(col)
                diagonals.remove(row - col)
                anti_diagonals.remove(row + col)
        
        # Initialize tracking sets
        cols = set()            # Tracks columns where queens are placed
        diagonals = set()       # Tracks main diagonals (\)
        anti_diagonals = set()  # Tracks secondary diagonals (/)
        
        count = 0  # Counts the number of solutions
        backtrack(0)
        return count
